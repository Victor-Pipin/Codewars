
// ‚ùìTASK:
// –î–∞–Ω—ã –º–∞—Å—Å–∏–≤ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä,
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—É–ª–µ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –≤ –º–∞—Å—Å–∏–≤–µ.

// üîΩINPUT:
// 1. –ú–∞—Å—Å–∏–≤ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (1 <= array_length <= 50)
// 2. –°—Ç—Ä–æ–∫–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∞—è –ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä: "AND", "OR", "XOR"

// üîºOUTPUT:
// –ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ (True or False).

// üí°EXAMPLES:
// operator: 'AND'
// booleans = [True, True, False], operator = "AND"
// True AND True -> True
// True AND False -> False
// return False

// operator: 'OR'
// booleans = [True, True, False], operator = "OR"
// True OR True -> True
// True OR False -> True
// return True

// operator: 'XOR'
// booleans = [True, True, False], operator = "XOR"
// True XOR True -> False
// False XOR False -> False
// return False

// üîÑENGLISH TRANSLATION:
// Given an array of Boolean values and a logical operator,
// return a Boolean result based on sequentially applying the operator to the values in the array.
// üîΩINPUT:
// 1. An Array of boolean values (1 <= array_length <= 50)
// 2. A String defining a logical operator: "AND", "OR", "XOR"
// üîºOUTPUT:
// A Boolean value (True or False).


// ‚úÖSOLUTION:

function logicalCalculator(array, operator) {
    let result
    
    if (operator === 'OR') {
        result = array[0] || array[1];
    } else if (operator === 'AND') {
        result = array[0] && array[1];
    }
    
    for (let i = 2; i < array.length; i++) {
        if (operator === 'OR') {
            result = result || array[i]
        } else if (operator === 'AND') {
            result = result && array[i]
        }
    }

    return result
}


// üìàREFACTOR: